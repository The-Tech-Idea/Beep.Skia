using SkiaSharp;
using Beep.Skia;
using Beep.Skia.Model;
using System;

namespace Beep.Skia.Security
{
    public enum Confidence { Low, Medium, High }

    public class VulnerabilityNode : SecurityControl
    {
        private string _vulnId = "VULN-0001";
        private Severity _severity = Severity.Medium;
        private double _cvss = 5.0; // 0..10
        private string _affectedAsset = "Asset";

        public string VulnId { get => _vulnId; set { var v = value ?? string.Empty; if (_vulnId != v) { _vulnId = v; if (NodeProperties.TryGetValue("VulnId", out var p)) p.ParameterCurrentValue = _vulnId; else NodeProperties["VulnId"] = new ParameterInfo { ParameterName = "VulnId", ParameterType = typeof(string), DefaultParameterValue = _vulnId, ParameterCurrentValue = _vulnId, Description = "Vulnerability ID" }; Name = _vulnId; InvalidateVisual(); } } }
        public Severity Severity { get => _severity; set { if (_severity != value) { _severity = value; if (NodeProperties.TryGetValue("Severity", out var p)) p.ParameterCurrentValue = _severity; else NodeProperties["Severity"] = new ParameterInfo { ParameterName = "Severity", ParameterType = typeof(Severity), DefaultParameterValue = _severity, ParameterCurrentValue = _severity, Description = "Severity", Choices = Enum.GetNames(typeof(Severity)) }; InvalidateVisual(); } } }
        public double Cvss { get => _cvss; set { var v = Math.Max(0, Math.Min(10, value)); if (Math.Abs(_cvss - v) > double.Epsilon) { _cvss = v; if (NodeProperties.TryGetValue("Cvss", out var p)) p.ParameterCurrentValue = _cvss; else NodeProperties["Cvss"] = new ParameterInfo { ParameterName = "Cvss", ParameterType = typeof(double), DefaultParameterValue = _cvss, ParameterCurrentValue = _cvss, Description = "CVSS score (0..10)" }; InvalidateVisual(); } } }
        public string AffectedAsset { get => _affectedAsset; set { var v = value ?? string.Empty; if (_affectedAsset != v) { _affectedAsset = v; if (NodeProperties.TryGetValue("AffectedAsset", out var p)) p.ParameterCurrentValue = _affectedAsset; else NodeProperties["AffectedAsset"] = new ParameterInfo { ParameterName = "AffectedAsset", ParameterType = typeof(string), DefaultParameterValue = _affectedAsset, ParameterCurrentValue = _affectedAsset, Description = "Affected asset" }; InvalidateVisual(); } } }

        public VulnerabilityNode()
        {
            Width = 180; Height = 90;
            NodeProperties["VulnId"] = new ParameterInfo { ParameterName = "VulnId", ParameterType = typeof(string), DefaultParameterValue = _vulnId, ParameterCurrentValue = _vulnId, Description = "Vulnerability ID" };
            NodeProperties["Severity"] = new ParameterInfo { ParameterName = "Severity", ParameterType = typeof(Severity), DefaultParameterValue = _severity, ParameterCurrentValue = _severity, Description = "Severity", Choices = Enum.GetNames(typeof(Severity)) };
            NodeProperties["Cvss"] = new ParameterInfo { ParameterName = "Cvss", ParameterType = typeof(double), DefaultParameterValue = _cvss, ParameterCurrentValue = _cvss, Description = "CVSS score (0..10)" };
            NodeProperties["AffectedAsset"] = new ParameterInfo { ParameterName = "AffectedAsset", ParameterType = typeof(string), DefaultParameterValue = _affectedAsset, ParameterCurrentValue = _affectedAsset, Description = "Affected asset" };
            EnsurePortCounts(1, 1);
        }

        protected override void DrawSecurityContent(SKCanvas canvas, DrawingContext context)
        {
            var r = new SKRect(X, Y, X + Width, Y + Height);
            using var fill = new SKPaint { Color = BackgroundColor, Style = SKPaintStyle.Fill, IsAntialias = true };
            using var border = new SKPaint { Color = BorderColor, StrokeWidth = BorderThickness, Style = SKPaintStyle.Stroke, IsAntialias = true };
            canvas.DrawRoundRect(r, 6, 6, fill);
            canvas.DrawRoundRect(r, 6, 6, border);

            using var namePaint = new SKPaint { Color = TextColor, IsAntialias = true };
            using var nameFont = new SKFont(SKTypeface.Default, 11) { Edging = SKFontEdging.SubpixelAntialias, Embolden = true };
            using var metaPaint = new SKPaint { Color = TextColor, IsAntialias = true };
            using var metaFont = new SKFont(SKTypeface.Default, 8) { Edging = SKFontEdging.SubpixelAntialias };
            canvas.DrawText(VulnId, r.MidX, r.MidY - 8, SKTextAlign.Center, nameFont, namePaint);
            canvas.DrawText($"{Severity} Â· CVSS {Cvss:0.0}", r.MidX, r.Bottom - 18, SKTextAlign.Center, metaFont, metaPaint);
            canvas.DrawText($"Asset: {AffectedAsset}", r.MidX, r.Bottom - 6, SKTextAlign.Center, metaFont, metaPaint);

            using var inPaint = new SKPaint { Color = MaterialColors.SecondaryContainer, IsAntialias = true };
            using var outPaint = new SKPaint { Color = MaterialColors.Primary, IsAntialias = true };
            foreach (var p in InConnectionPoints) canvas.DrawCircle(p.Position.X, p.Position.Y, 4, inPaint);
            foreach (var p in OutConnectionPoints) canvas.DrawCircle(p.Position.X, p.Position.Y, 4, outPaint);
        }
    }
}
